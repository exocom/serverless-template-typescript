---
# Generated by @kalarrs/cli
# Run `kalarrs workspace init`

service:
  name: workspace-test

resources:
  Parameters:
    hostedZoneDomainName:
      Type: String
      Default: ${file(../.env/${self:provider.stage}.yml):custom.apiGateway.customDomain.hostedZone.domainName, file(.env/${self:provider.stage}.yml):custom.apiGateway.customDomain.hostedZone.domainName}
    customDomainName:
      Type: String
      Default: ${file(../.env/${self:provider.stage}.yml):custom.apiGateway.customDomain.domainName, file(.env/${self:provider.stage}.yml):custom.apiGateway.customDomain.domainName}
    restApiName:
      Type: String
      Default: "api-${file(../.env/${self:provider.stage}.yml):custom.apiGateway.name, file(.env/${self:provider.stage}.yml):custom.apiGateway.name}-${self:provider.stage}"
    restApiDescription:
      Type: String
      Default: ${file(../.env/${self:provider.stage}.yml):custom.apiGateway.description, file(.env/${self:provider.stage}.yml):custom.apiGateway.description}
    certificateArn:
      Type: String
      Default: ${file(../.env/${self:provider.stage}.yml):custom.apiGateway.customDomain.certificateArn, file(.env/${self:provider.stage}.yml):custom.apiGateway.customDomain.certificateArn}
    basePath:
      Type: String
      Default: ${file(../.env/${self:provider.stage}.yml):custom.apiGateway.customDomain.basePathMapping, file(.env/${self:provider.stage}.yml):custom.apiGateway.customDomain.basePathMapping}
    stageName:
      Type: String
      Default: ${self:provider.stage}
  Resources:
    WorkspaceRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name:
          Ref: restApiName
        Description:
          Ref: restApiDescription
    #     Updating BinaryMediaTypes causes Cloud Formation to freeze.
    #     If you have already deployed the api, please use AWS console to add or remove binary types.
    #        BinaryMediaTypes:
    #        - "audio/mpeg"
    #        - "*/*"
    #          This is default
    #          EndpointConfiguration:
    #            Types:
    #              - "EDGE"

    MockMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: WorkspaceRestApi
        ResourceId:
          Fn::GetAtt:
            - WorkspaceRestApi
            - "RootResourceId"
        HttpMethod: "OPTIONS"
        AuthorizationType: "NONE"
        Integration:
          Type: "MOCK"

    Deployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId:
          Ref: WorkspaceRestApi
        Description:
          Ref: restApiDescription
        StageName:
          Ref: stageName

    DomainName:
      Type: AWS::ApiGateway::DomainName
      Properties:
        CertificateArn:
          Ref: certificateArn
        DomainName:
          Ref: customDomainName

    BasePathMapping:
      Type: AWS::ApiGateway::BasePathMapping
      Properties:
        BasePath:
          Ref: basePath
        DomainName:
          Ref: DomainName
        RestApiId:
          Ref: WorkspaceRestApi
        Stage: ${self:provider.stage}

    DNSRecord:
      Type: AWS::Route53::RecordSet
      DependsOn: BasePathMapping
      Properties:
        HostedZoneName:
          Fn::Join:
            - ""
            - - Ref: hostedZoneDomainName
              - "."
        Name:
          Fn::Join:
            - ""
            - - Ref: customDomainName
              - "."
        Type: CNAME
        TTL: 300
        ResourceRecords:
          - Fn::GetAtt: DomainName.DistributionDomainName

  #    NOTE : You'll need to respond to the Cert Email request.
  #    Certificate:
  #      Type: 'AWS::CertificateManager::Certificate'
  #      Properties:
  #        DomainName:
  #          Ref: customDomainName


  Outputs:
    apiGatewayRestApiId:
      Value:
        Ref: WorkspaceRestApi
      Export:
        Name:
          Fn::Join:
            - ""
            - - Ref: restApiName
              - "-restApiId"

    apiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt: WorkspaceRestApi.RootResourceId
      Export:
        Name:
          Fn::Join:
            - ""
            - - Ref: restApiName
              - "-rootResourceId"
service:
  name: workspace

provider:
  name: aws
  environment: ${file(../.env/${self:provider.stage}.yml):provider.environment, file(.env/${self:provider.stage}.yml):provider.environment}
  profile: default
  region: us-west-2
  stage: ${opt:stage, "dev"}
  apiGatewayRestApiName: "api-${self:provider.stage}"


plugins:
  #    - "@kalarrs/serverless-shared-api-gateway"
  #    - "@kalarrs/serverless-domain-manager"
  - "@kalarrs/serverless-workspace-utils"


custom:
  user: ${file(serverless-user.yml):custom.user, file(../serverless-user.yml):custom.user}
  restApiName: "api-${file(../.env/${self:provider.stage}.yml):custom.apiGateway.name, file(.env/${self:provider.stage}.yml):custom.apiGateway.name}-${self:provider.stage}"

#  TODO : Remove custom domain name after this is working!

#  customDomain:
#    domainName: ${file(../.env/${self:provider.stage}.yml):custom.customDomain.domainName, file(.env/${self:provider.stage}.yml):custom.customDomain.domainName}
#    basePathMappings: ${file(../.env/${self:provider.stage}.yml):custom.customDomain.basePathMappings, file(.env/${self:provider.stage}.yml):custom.customDomain.basePathMappings}
#    certificateName: ${file(../.env/${self:provider.stage}.yml):custom.customDomain.certificateName, file(.env/${self:provider.stage}.yml):custom.customDomain.certificateName}
#    enabled: ${file(../.env/${self:provider.stage}.yml):custom.customDomain.enabled, file(.env/${self:provider.stage}.yml):custom.customDomain.enabled}
#
#    createRoute53Record: true
#    endpointType: edge

      # === FROM SOLUTION LEVEL ===

      # NOTE: To CREATE custom domain names to NON user api
      # `sls create_domain --stage=dev`
      # `sls create_domain --stage=demo`
      # `sls create_domain --stage=prod`

      # NOTE: To LINK custom domain names to NON user api
      # `sls deploy --stage=dev`
      # `sls deploy --stage=demo`
      # `sls deploy --stage=prod`

      # NOTE: If any errors are encountered
      # `sls remove --stage=dev`
    # `sls remove --stage=demo`
    # `sls remove --stage=prod`
