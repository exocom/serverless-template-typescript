service:
  name: solution

provider:
  name: aws
  environment: ${file(../.env/${self:provider.stage}.yml):provider.environment, file(.env/${self:provider.stage}.yml):provider.environment}
  profile: "change-profile"
  region: us-west-2
  stage: ${opt:stage, "dev"}
  apiGatewayRestApiName: "${self:provider.stage}-change-api-name"

plugins:
  - "@kalarrs/serverless-shared-api-gateway"
  - "@kalarrs/serverless-domain-manager"
  - "@kalarrs/serverless-project-utils"

custom:
  user: ${file(serverless-user.yml):custom.user, file(../serverless-user.yml):custom.user}

  customDomain:
    domainName: ${file(../.env/${self:provider.stage}.yml):custom.customDomain.domainName, file(.env/${self:provider.stage}.yml):custom.customDomain.domainName}
    basePathMappings: ${file(../.env/${self:provider.stage}.yml):custom.customDomain.basePathMappings, file(.env/${self:provider.stage}.yml):custom.customDomain.basePathMappings}
    certificateName: ${file(../.env/${self:provider.stage}.yml):custom.customDomain.certificateName, file(.env/${self:provider.stage}.yml):custom.customDomain.certificateName}
    enabled: ${file(../.env/${self:provider.stage}.yml):custom.customDomain.enabled, file(.env/${self:provider.stage}.yml):custom.customDomain.enabled}

    createRoute53Record: true
    endpointType: edge

# === FROM SOLUTION LEVEL ===

  # NOTE: To CREATE custom domain names to NON user api
    # `sls create_domain --stage=dev`
    # `sls create_domain --stage=demo`
    # `sls create_domain --stage=prod`

  # NOTE: To LINK custom domain names to NON user api
    # `sls deploy --stage=dev`
    # `sls deploy --stage=demo`
    # `sls deploy --stage=prod`

    # NOTE: If any errors are encountered
       # `sls remove --stage=dev`
       # `sls remove --stage=demo`
       # `sls remove --stage=prod`
